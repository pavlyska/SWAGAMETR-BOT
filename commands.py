import telebot
import uuid
from datetime import datetime, timedelta
from base import cursor, conn
from app import bot, ADMIN_ID, main_menu , CHANNEL_USERNAME , types
from base import generate_wallet_id
from base import get_cursor
from app import get_cursor
import sqlite3
from data import GIFTS
from app import get_username
from app import get_clan_member_count
from data import FARMS
import time , datetime
from app import BOT_START_TIME
from app import update_premium_status

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id == ADMIN_ID:
        main_menu(message)
        return

    try:
        channel_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if channel_member.status not in ['member', 'administrator', 'creator']:
            bot.send_message(
                chat_id,
                "üß© <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</b> üéâ\n\n"
                "üîê –ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"üëâ @{CHANNEL_USERNAME}\n\n"
                "üîÑ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start —Å–Ω–æ–≤–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∏—à–∫–∞–º! ‚ú®",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return
    except Exception as e:
        bot.send_message(
            chat_id,
            "üõ†Ô∏è <b>–û–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞!</b> ü§ñ\n\n"
            f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {str(e)}\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É @blixmanager",
            parse_mode="HTML"
        )
        return

    username = message.from_user.username
    first_name = message.from_user.first_name

    cursor = get_cursor()
    try:
        cursor.execute('SELECT wallet_id FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

        if result is None:
            wallet_id = generate_wallet_id()
            cursor.execute('INSERT INTO users (user_id, username, first_name, registration_date, wallet_id) VALUES (?, ?, ?, ?, ?)', 
                           (user_id, username, first_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), wallet_id))
            conn.commit()
        else:
            cursor.execute('UPDATE users SET first_name = ? WHERE user_id = ?', (first_name, user_id))
            conn.commit()
            if not result[0]:
                wallet_id = generate_wallet_id()
                cursor.execute('UPDATE users SET wallet_id = ? WHERE user_id = ?', (wallet_id, user_id))
                conn.commit()

        welcome_message = (
            "üß© <b>–£—Ä–∞! –¢—ã –≤ –∏–≥—Ä–µ!</b> üéÆ\n\n"
            "‚ú® <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>\n"
            "ü§ë –¢–∞–ø–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å\n"
            "üíé –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã\n"
            "‚öîÔ∏è –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª—è—Ö\n"
            "üèÜ –ü–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –≤ —Ç–æ–ø–∞—Ö\n\n"
            "üéÅ –ê –µ—â—ë —Ç—É—Ç –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω, —Ñ–µ—Ä–º—ã –∏ –∫–ª–∞–Ω—ã!\n\n"
            "üöÄ <b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?</b> –í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton('–¢–∞–ø–∞—Ç—å ü§ë'), types.KeyboardButton('–ë–∞–ª–∞–Ω—Å üí∞'),
            types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üë§'), types.KeyboardButton('–¢–æ–ø –ø–æ —Å–≤–∞–≥–∏ üèÜ'),
            types.KeyboardButton('–ú–∞–≥–∞–∑–∏–Ω üõí'), types.KeyboardButton('–ò–≥—Ä—ã üé≤'),
            types.KeyboardButton('–õ–∏–≥–∏ üèÖ'), types.KeyboardButton('–§–µ—Ä–º—ã üè°'),
            types.KeyboardButton('–ö–ª–∞–Ω—ã üè∞'), types.KeyboardButton('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéÅ'),
            types.KeyboardButton('–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º üì¢'), types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'),
            types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è')
        )

        bot.send_message(
            chat_id,
            welcome_message,
            parse_mode="HTML",
            reply_markup=markup
        )

        bot.send_message(
            chat_id,
            "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @blixmanager üì©",
            parse_mode="HTML"
        )

    except sqlite3.Error as e:
        bot.send_message(
            chat_id,
            "üõë <b>–û–π, –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b> üíæ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É: {e}",
            parse_mode="HTML"
        )
    finally:
        cursor.close()

@bot.message_handler(commands=['gift'])
def give_gift(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, action, user_id_str, gift_emoji = message.text.split()
        user_id = int(user_id_str)
    except:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gift –≤—ã–¥–∞—Ç—å <user_id> <—ç–º–æ–¥–∑–∏>")
        return

    if action == '–≤—ã–¥–∞—Ç—å':
        if gift_emoji not in GIFTS:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        cursor.execute('INSERT INTO user_gifts (user_id, gift_name) VALUES (?, ?)', (user_id, gift_emoji))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ {gift_emoji} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    elif action == '–∑–∞–±—Ä–∞—Ç—å':
        cursor.execute('DELETE FROM user_gifts WHERE user_id = ? AND gift_name = ?', (user_id, gift_emoji))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ {gift_emoji} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤—ã–¥–∞—Ç—å' –∏–ª–∏ '–∑–∞–±—Ä–∞—Ç—å'.")

@bot.message_handler(commands=['aclans'])
def admin_clans_list(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    cursor.execute('SELECT clan_id, clan_name, owner_id, balance, multiplier, clan_description FROM clans')
    clans = cursor.fetchall()

    if not clans:
        bot.send_message(chat_id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤.", message_thread_id=thread_id)
        return

    clans_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤:**\n\n"

    for clan in clans:
        clan_id, clan_name, owner_id, balance, multiplier, clan_description = clan
        owner_username = get_username(owner_id) if owner_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        balance_formatted = f"{balance:,}".replace(",", ".")
        member_count = get_clan_member_count(clan_id)
        farm_count = get_clan_farm_count(clan_id)  

        clans_text += (f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {clan_name}\n"
                      f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_formatted} —Å–≤–∞–≥–∏\n"
                      f"üöú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º: {farm_count}\n"
                      f"üëë –õ–∏–¥–µ—Ä: @{owner_username} (ID: {owner_id})\n"
                      f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n\n"
                      "    ")  

    bot.send_message(chat_id, clans_text, parse_mode="Markdown", message_thread_id=thread_id)

@bot.message_handler(commands=['farmtest'])
def farm_test(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    try:

        conn = sqlite3.connect('swag_boti.db', check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute('SELECT farm_type, SUM(quantity), clan_connected FROM farms WHERE user_id = ? GROUP BY farm_type, clan_connected', (user_id,))
        farms = cursor.fetchall()

        if not farms:
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–µ—Ä–º.", message_thread_id=thread_id)
            return

        message_parts = ["üíå –í–∞—à–∏ —Ñ–µ—Ä–º—ã –ø—Ä–∏–Ω–µ—Å–ª–∏ –¥–æ—Ö–æ–¥!:"]
        for farm_type, quantity, clan_connected in farms:
            if clan_connected:
                continue  
            if farm_type in FARMS:
                income_per_farm = FARMS[farm_type]["income"]
                total_income = income_per_farm * quantity
                message_parts.append(f"{farm_type} x{quantity}")

        personal_income = sum(FARMS[farm_type]["income"] * quantity for farm_type, quantity, _ in farms if farm_type in FARMS)
        message_parts.append(f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {personal_income:,} —Å–≤–∞–≥–∏ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.".replace(",", "."))

        full_message = "\n".join(message_parts)
        bot.send_message(chat_id, full_message, message_thread_id=thread_id)

    except sqlite3.Error as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=thread_id)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", message_thread_id=thread_id)

@bot.message_handler(commands=['post'])
def post_step_1(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:")
    bot.register_next_step_handler(message, post_step_2)

def post_step_2(message):
    if not message.text:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞!")
        return bot.register_next_step_handler(message, post_step_2)

    post_text = message.text
    bot.send_message(message.chat.id, "üì∑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    bot.register_next_step_handler(message, post_step_3, post_text)

def post_step_3(message, post_text):
    photo = None
    if message.photo:
        photo = message.photo[-1].file_id  
    elif message.text and message.text.lower() == "–Ω–µ—Ç":
        photo = None
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return bot.register_next_step_handler(message, post_step_3, post_text)

    send_post_to_channel(post_text, photo, message.chat.id)

def send_post_to_channel(text, photo, admin_chat_id):
    channel_username = 'metrswagi'  

    try:
        if photo:
            bot.send_photo(chat_id=channel_username, photo=photo, caption=text, parse_mode="Markdown")
        else:
            bot.send_message(chat_id=channel_username, text=text, parse_mode="Markdown")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üî∑ –ò–≥—Ä–∞—Ç—å", url='https://t.me/swagametr_bot'))  

        if photo:
            sent_message = bot.send_photo(chat_id=channel_username, photo=photo, caption=text, reply_markup=markup, parse_mode="Markdown")
        else:
            sent_message = bot.send_message(chat_id=channel_username, text=text, reply_markup=markup, parse_mode="Markdown")

        bot.send_message(admin_chat_id, "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")

    except Exception as e:
        bot.send_message(admin_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")

def get_clan_farm_count(clan_id):
    cursor.execute('SELECT COUNT(*) FROM farms WHERE clan_connected = 1 AND user_id IN (SELECT user_id FROM clan_members WHERE clan_id = ?)', (clan_id,))
    count = cursor.fetchone()
    return count[0] if count else 0

@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    help_text = (
        "‚ú® **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:** ‚ú®\n\n"
        "üìå **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚û°Ô∏è `/start` ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ üéÆ **[B]**\n"
        "‚û°Ô∏è `/profile` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å üë§ **[G]**\n"
        "‚û°Ô∏è `/telegram` ‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª üì¢ **[G]**\n"
        "‚û°Ô∏è `/buy` ‚Äî –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å –ø–æ–º–æ—â—å—é API-–∫–ª—é—á–∞ üíé **[B]**\n"
        "‚û°Ô∏è `/crypto` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üí± **[G]**\n"
        "‚û°Ô∏è `/invite` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–æ—Ç–∞ ü§ù **[B]**\n"
        "‚û°Ô∏è `/swag` ‚Äî –£–≤–µ–ª–∏—á–∏—Ç—å –±–∞—à–Ω—é —Å–≤–∞–≥–∏ üèØ **[M]**\n"
        "‚û°Ô∏è `/topswag` ‚Äî –¢–æ–ø –±–∞—à–µ–Ω —Å–≤–∞–≥–∏ –≤ —á–∞—Ç–µ üèÜ **[M]**\n"
        "‚û°Ô∏è `/duel <—Å—Ç–∞–≤–∫–∞>` ‚Äî –ù–∞—á–∞—Ç—å –¥—É—ç–ª—å ‚öîÔ∏è **[M]**\n\n"
        "‚ÑπÔ∏è **–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:**\n"
        "**[M]** ‚Äî –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö\n"
        "**[B]** ‚Äî –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞\n"
        "**[G]** ‚Äî –†–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ\n\n"
        "üéâ **–ù–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–≤–∞–≥—É!**"
    )

    try:

        if message.chat.type in ['group', 'supergroup']:
            bot.send_message(
                user_id,
                help_text,
                parse_mode="Markdown"
            )
            bot.send_message(
                chat_id,
                f"üì© @{message.from_user.username or 'User'}! –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                message_thread_id=thread_id
            )
        else:

            bot.send_message(
                chat_id,
                help_text,
                parse_mode="Markdown"
            )

    except telebot.apihelper.ApiTelegramException as e:
        if "Forbidden" in str(e):
            bot.send_message(
                chat_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –≤ –ª–∏—á–∫–µ —Å –ø–æ–º–æ—â—å—é /start, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!",
                message_thread_id=thread_id
            )
        elif e.error_code == 400 and "TOPIC_CLOSED" in e.description:
            bot.send_message(
                chat_id,
                "‚ùå –≠—Ç–∞ —Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞.",
                message_thread_id=thread_id
            )
        else:
            bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e.description}",
                message_thread_id=thread_id
            )

@bot.message_handler(commands=['stats'])
def stats_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    try:

        conn = sqlite3.connect('swag_boti.db', check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute('SELECT SUM(swag), SUM(total_swag) FROM users')
        swag_data = cursor.fetchone()
        total_swag = swag_data[0] or 0  
        total_swag_earned = swag_data[1] or 0  

        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0] or 0

        uptime_seconds = int(time.time() - BOT_START_TIME)
        uptime_days = uptime_seconds // (24 * 3600)
        uptime_hours = (uptime_seconds % (24 * 3600)) // 3600
        uptime_minutes = (uptime_seconds % 3600) // 60
        uptime_str = f"{uptime_days} –¥–Ω. {uptime_hours} —á. {uptime_minutes} –º–∏–Ω."

        cursor.execute('SELECT COUNT(*) FROM clans')
        total_clans = cursor.fetchone()[0] or 0

        cursor.execute('SELECT SUM(quantity) FROM farms')
        total_farms = cursor.fetchone()[0] or 0

        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM crypto_wallets')
        api_users = cursor.fetchone()[0] or 0

        stats_message = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üí∞ **–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Å–≤–∞–≥–∏:**\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_swag:,} —Å–≤–∞–≥–∏\n"
            f"–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_swag_earned:,} —Å–≤–∞–≥–∏\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"–í—Å–µ–≥–æ: {total_users}\n\n"
            f"‚è≥ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:** {uptime_str}\n\n"
            f"üè∞ **–ö–ª–∞–Ω—ã:**\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {total_clans}\n\n"
            f"üöú **–§–µ—Ä–º—ã:**\n"
            f"–í—Å–µ–≥–æ —É –∏–≥—Ä–æ–∫–æ–≤: {total_farms}\n\n"
            f"üîë **API-–∫–ª—é—á–∏:**\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–≥—Ä–æ–∫–∞–º–∏: {api_users}"
        )

        bot.send_message(chat_id, stats_message, parse_mode="Markdown", message_thread_id=thread_id)

    except sqlite3.Error as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=thread_id)
        if 'conn' in locals():
            conn.rollback()
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", message_thread_id=thread_id)
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

@bot.message_handler(commands=['tegreload'])
def tegreload_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    try:

        conn = sqlite3.connect('swag_boti.db', check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute('SELECT user_id, username FROM users')
        users = cursor.fetchall()

        if not users:
            bot.send_message(chat_id, "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", message_thread_id=thread_id)
            cursor.close()
            conn.close()
            return

        updated_count = 0

        for db_user_id, db_username in users:
            try:

                user_info = bot.get_chat_member(chat_id, db_user_id)
                current_username = user_info.user.username

                if current_username != db_username:
                    cursor.execute('UPDATE users SET username = ? WHERE user_id = ?', (current_username, db_user_id))
                    updated_count += 1
                    print(f"–û–±–Ω–æ–≤–ª—ë–Ω —Ç–µ–≥ –¥–ª—è ID {db_user_id}: {db_username} -> @{current_username}")

            except telebot.apihelper.ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {db_user_id}: {e}")
                continue  

        conn.commit()

        bot.send_message(
            chat_id,
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count}\n"
            f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(users)}",
            message_thread_id=thread_id
        )

    except sqlite3.Error as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=thread_id)
        if 'conn' in locals():
            conn.rollback()
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", message_thread_id=thread_id)
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

@bot.message_handler(commands=['reacc'])
def reacc_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reacc <old_user_id> <new_user_id>\n–ü—Ä–∏–º–µ—Ä: /reacc 123456789 987654321", message_thread_id=thread_id)
            return

        old_user_id = int(parts[1])  
        new_user_id = int(parts[2])  

        conn = sqlite3.connect('swag_boti.db', check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute('SELECT username FROM users WHERE user_id = ?', (old_user_id,))
        old_user = cursor.fetchone()
        if not old_user:
            bot.send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {old_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", message_thread_id=thread_id)
            return

        cursor.execute('SELECT username FROM users WHERE user_id = ?', (new_user_id,))
        new_user = cursor.fetchone()
        if not new_user:
            bot.send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", message_thread_id=thread_id)
            return

        old_username = old_user[0] if old_user[0] else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        new_username = new_user[0] if new_user[0] else "–ë–µ–∑ –∏–º–µ–Ω–∏"

        try:

            cursor.execute('SELECT swag, total_swag FROM users WHERE user_id = ?', (old_user_id,))
            old_user_data = cursor.fetchone()
            old_swag, old_total_swag = old_user_data if old_user_data else (0, 0)

            cursor.execute('SELECT swag, total_swag FROM users WHERE user_id = ?', (new_user_id,))
            new_user_data = cursor.fetchone()
            current_swag, current_total_swag = new_user_data if new_user_data else (0, 0)

            new_swag = current_swag + old_swag
            new_total_swag = current_total_swag + old_total_swag
            cursor.execute('UPDATE users SET swag = ?, total_swag = ? WHERE user_id = ?', (new_swag, new_total_swag, new_user_id))

            cursor.execute('SELECT crypto_type, amount FROM crypto_wallets WHERE user_id = ?', (old_user_id,))
            old_crypto = cursor.fetchall()
            for crypto_type, amount in old_crypto:
                cursor.execute('SELECT amount FROM crypto_wallets WHERE user_id = ? AND crypto_type = ?', (new_user_id, crypto_type))
                existing_amount = cursor.fetchone()
                new_amount = amount + (existing_amount[0] if existing_amount else 0)
                cursor.execute('INSERT OR REPLACE INTO crypto_wallets (user_id, crypto_type, amount) VALUES (?, ?, ?)', 
                               (new_user_id, crypto_type, new_amount))

            cursor.execute('DELETE FROM crypto_wallets WHERE user_id = ?', (old_user_id,))

            cursor.execute('SELECT farm_type, quantity, clan_connected FROM farms WHERE user_id = ?', (old_user_id,))
            old_farms = cursor.fetchall()
            for farm_type, quantity, clan_connected in old_farms:
                cursor.execute('SELECT quantity FROM farms WHERE user_id = ? AND farm_type = ?', (new_user_id, farm_type))
                existing_quantity = cursor.fetchone()
                new_quantity = quantity + (existing_quantity[0] if existing_quantity else 0)
                cursor.execute('INSERT OR REPLACE INTO farms (user_id, farm_type, quantity, clan_connected) VALUES (?, ?, ?, ?)', 
                               (new_user_id, farm_type, new_quantity, clan_connected))

            cursor.execute('DELETE FROM farms WHERE user_id = ?', (old_user_id,))

            cursor.execute('UPDATE clan_members SET user_id = ? WHERE user_id = ?', (new_user_id, old_user_id))
            cursor.execute('UPDATE clans SET owner_id = ? WHERE owner_id = ?', (new_user_id, old_user_id))

            cursor.execute('DELETE FROM users WHERE user_id = ?', (old_user_id,))

            conn.commit()

            bot.send_message(
                chat_id,
                f"‚úÖ –ò–º—É—â–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ:\n"
                f"–û—Ç: ID {old_user_id} (@{old_username})\n"
                f"–ö: ID {new_user_id} (@{new_username})\n"
                f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: –∫–ª–∞–Ω, —Å–≤–∞–≥–∞, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–µ—Ä–º—ã.\n"
                f"–°—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.",
                message_thread_id=thread_id
            )

            try:
                bot.send_message(
                    new_user_id,
                    f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±—Ä–∞–ª –∏–º—É—â–µ—Å—Ç–≤–æ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ ID {old_user_id} –∏ –ø–µ—Ä–µ–Ω—ë—Å –µ–≥–æ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
                    f"–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω—ã: –∫–ª–∞–Ω, —Å–≤–∞–≥–∞, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–µ—Ä–º—ã."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id}: {e}")

        except sqlite3.Error as e:
            conn.rollback()
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏–º—É—â–µ—Å—Ç–≤–∞: {e}", message_thread_id=thread_id)
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", message_thread_id=thread_id)
        finally:
            cursor.close()
            conn.close()

    except ValueError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.", message_thread_id=thread_id)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}", message_thread_id=thread_id)

@bot.message_handler(commands=['atop'])
def top_by_id_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id if message.is_topic_message else None

    if user_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", message_thread_id=thread_id)
        return

    cursor.execute("""
        SELECT user_id, username, swag, hide_top 
        FROM users 
        ORDER BY swag DESC 
        LIMIT 10
    """)
    users = cursor.fetchall()

    if not users:
        bot.send_message(chat_id, "‚ùå –¢–æ–ø –ø—É—Å—Ç. –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", message_thread_id=thread_id)
        return

    medals = ["ü•á", "ü•à", "ü•â", "üéñ", "üèÖ", "üéó", "üí†", "üî±", "‚öú", "üåÄ"]
    top_message = "üí∞ **–¢–û–ü-10 –ü–û –ë–ê–õ–ê–ù–°–£ (—Å ID):**\n\n"

    for i, (user_id, username, swag, hide_top) in enumerate(users):
        medal = medals[i] if i < len(medals) else "üé≤"
        display_name = username if username else "None"
        swag_formatted = f"{int(swag):,}".replace(",", ".")  
        hide_status = "üëÄ –°–∫—Ä—ã—Ç" if hide_top else "üëÅ –í–∏–¥–∏–º"

        top_message += (
            f"{medal} {i+1}. **ID:** <code>{user_id}</code>   |   "
            f"@{display_name}   |   "
            f"üí∞ {swag_formatted} —Å–≤–∞–≥–∏   |   "
            f"{hide_status}\n\n"  
        )

    try:
        bot.send_message(
            chat_id,
            top_message,
            parse_mode="HTML",  
            message_thread_id=thread_id
        )
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400 and "TOPIC_CLOSED" in e.description:
            bot.send_message(
                chat_id,
                "‚ùå –≠—Ç–∞ —Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
                message_thread_id=thread_id
            )
        else:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e.description}", message_thread_id=thread_id)

@bot.message_handler(commands=['buy'])
def buy_premium_with_key(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if message.chat.type != 'private':
        bot.send_message(chat_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º! üòä\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy —Ç–∞–º.")
        return

    cursor.execute('SELECT is_premium, premium_end_date FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 1:
        end_date = datetime.strptime(result[1], '%Y-%m-%d %H:%M:%S')
        if datetime.now() < end_date:
            days_left = (end_date - datetime.now()).days
            bot.send_message(chat_id, f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π).")
            return

    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π:")
    bot.register_next_step_handler(message, process_premium_key)

def process_premium_key(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    api_key = message.text.strip()

    cursor.execute('SELECT days, used_by FROM premium_api_keys WHERE key = ?', (api_key,))
    key_data = cursor.fetchone()

    if not key_data:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return

    days, used_by = key_data

    if used_by is not None:
        bot.send_message(chat_id, "‚ùå –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    end_date = datetime.now() + timedelta(days=days)
    cursor.execute('UPDATE users SET is_premium = 1, premium_end_date = ?, selected_badge = "üíé" WHERE user_id = ?',
                   (end_date.strftime('%Y-%m-%d %H:%M:%S'), user_id))

    cursor.execute('UPDATE premium_api_keys SET used_by = ?, used_at = ? WHERE key = ?',
                   (user_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), api_key))
    conn.commit()

    bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!")

@bot.message_handler(commands=['api'])
def api_management(message):
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/api create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á\n/api list - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
        return

    subcommand = args[1].lower()

    if subcommand == 'create':

        new_key = str(uuid.uuid4()).replace('-', '')[:16]  

        cursor.execute('INSERT INTO premium_api_keys (key, created_by, created_at, days) VALUES (?, ?, ?, ?)',
                       (new_key, user_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 30))
        conn.commit()

        bot.send_message(message.chat.id, f"üîë –ù–æ–≤—ã–π API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω:\n`{new_key}`\n\n–≠—Ç–æ—Ç –∫–ª—é—á –¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", parse_mode="Markdown")

    elif subcommand == 'list':

        cursor.execute('SELECT key, created_at, used_by, used_at FROM premium_api_keys ORDER BY created_at DESC LIMIT 10')
        keys = cursor.fetchall()

        if not keys:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π.")
            return

        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 API –∫–ª—é—á–µ–π:\n\n"
        for key, created_at, used_by, used_at in keys:
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used_by else "üÜì –ê–∫—Ç–∏–≤–µ–Ω"
            used_info = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {used_by}" if used_by else "–µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            response += f"üîë `{key}`\nüìÖ –°–æ–∑–¥–∞–Ω: {created_at}\nüîÑ –°—Ç–∞—Ç—É—Å: {status} ({used_info})\n\n"

        bot.send_message(message.chat.id, response, parse_mode="Markdown")

    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/api create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á\n/api list - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")

@bot.message_handler(commands=['telegram'])
def telegram_command(message):
    chat_id = message.chat.id
    telegram_link = "https://t.me/metrswagi"  

    bot.send_message(chat_id, f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {telegram_link}") 

@bot.message_handler(commands=['disablecrypto'])
def toggle_crypto(message):
    global crypto_enabled
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /disablecrypto <on/off>")
            return

        state = parts[1].lower()
        if state not in ['on', 'off']:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 'on' –∏–ª–∏ 'off'.")
            return

        if state == 'on':
            crypto_enabled = True
            bot.send_message(message.chat.id, "‚úÖ –†–∞–∑–¥–µ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∫–ª—é—á—ë–Ω.")
        elif state == 'off':
            crypto_enabled = False
            bot.send_message(message.chat.id, "‚úÖ –†–∞–∑–¥–µ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –æ—Ç–∫–ª—é—á—ë–Ω.")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")  

@bot.message_handler(commands=['resetmoney'])
def reset_money(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:  
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:  
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /resetmoney <user_id>")
            return

        target_user_id = int(parts[1])  

        cursor.execute('SELECT swag FROM users WHERE user_id = ?', (target_user_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute('UPDATE users SET swag = 0 WHERE user_id = ?', (target_user_id,))
        conn.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å —Å–≤–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω—É–ª—ë–Ω.")

        admin_username = message.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        try:
            bot.send_message(target_user_id, f"‚ùå –í–∞—à –±–∞–ª–∞–Ω—Å —Å–≤–∞–≥–∏ –æ–±–Ω—É–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {target_user_id}: {e}")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['resetcrypto'])
def reset_crypto(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:  
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:  
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /resetcrypto <user_id> <crypto_type>\n–ü—Ä–∏–º–µ—Ä: /resetcrypto 123456789 BL")
            return

        target_user_id = int(parts[1])  
        crypto_type = parts[2].upper()  

        valid_crypto_types = ["BL", "DP", "DG"]
        if crypto_type not in valid_crypto_types:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_crypto_types)}")
            return

        cursor.execute('SELECT swag FROM users WHERE user_id = ?', (target_user_id,))
        user_result = cursor.fetchone()
        if not user_result:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute('SELECT amount FROM crypto_wallets WHERE user_id = ? AND crypto_type = ?', 
                       (target_user_id, crypto_type))
        crypto_result = cursor.fetchone()

        if not crypto_result or crypto_result[0] == 0:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ—Ç {crypto_type} –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è.")
            return

        cursor.execute('UPDATE crypto_wallets SET amount = 0 WHERE user_id = ? AND crypto_type = ?', 
                       (target_user_id, crypto_type))
        conn.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å {crypto_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω—É–ª—ë–Ω.")

        admin_username = message.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        try:
            bot.send_message(target_user_id, f"‚ùå –í–∞—à –±–∞–ª–∞–Ω—Å {crypto_type} –æ–±–Ω—É–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {target_user_id}: {e}")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['setwallet'])
def set_wallet(message):
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split(maxsplit=1)  
        if len(parts) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setwallet <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä_–∫–æ—à–µ–ª—å–∫–∞>")
            return

        new_wallet_id = parts[1].strip()  

        cursor.execute('SELECT user_id FROM users WHERE wallet_id = ? AND user_id != ?', (new_wallet_id, user_id))
        existing_user = cursor.fetchone()
        if existing_user:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

        cursor.execute('UPDATE users SET wallet_id = ? WHERE user_id = ?', (new_wallet_id, user_id))
        conn.commit()

        bot.send_message(message.chat.id, f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: `{new_wallet_id}`", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['setpremium'])
def set_premium(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:  
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:  
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setpremium <user_id> <–¥–Ω–µ–π>")
            return

        target_user_id = int(parts[1])  
        days = int(parts[2])  

        if days <= 0:  
            bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        update_premium_status(target_user_id, is_premium=True, days=days)

        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π.")

        admin_username = message.from_user.username
        try:
            bot.send_message(target_user_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –≤—ã–¥–∞–ª –≤–∞–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['removepremium'])
def remove_premium(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:  
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:  
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removepremium <user_id>")
            return

        target_user_id = int(parts[1])  

        update_premium_status(target_user_id, is_premium=False)

        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª—ë–Ω.")

        admin_username = message.from_user.username
        try:
            bot.send_message(target_user_id, f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –∑–∞–±—Ä–∞–ª —É –≤–∞—Å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")